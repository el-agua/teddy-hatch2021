{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.default = resolveRewrites;\n\nvar _pathMatch = _interopRequireDefault(require(\"./path-match\"));\n\nvar _prepareDestination = _interopRequireWildcard(require(\"./prepare-destination\"));\n\nvar _normalizeTrailingSlash = require(\"../../../../client/normalize-trailing-slash\");\n\nvar _normalizeLocalePath = require(\"../../i18n/normalize-locale-path\");\n\nvar _parseRelativeUrl = require(\"./parse-relative-url\");\n\nvar _router = require(\"../router\");\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function () {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nconst customRouteMatcher = (0, _pathMatch.default)(true);\n\nfunction resolveRewrites(asPath, pages, rewrites, query, resolveHref, locales) {\n  let matchedPage = false;\n  let parsedAs = (0, _parseRelativeUrl.parseRelativeUrl)(asPath);\n  let fsPathname = (0, _normalizeTrailingSlash.removePathTrailingSlash)((0, _normalizeLocalePath.normalizeLocalePath)((0, _router.delBasePath)(parsedAs.pathname), locales).pathname);\n  let resolvedHref;\n\n  const handleRewrite = rewrite => {\n    const matcher = customRouteMatcher(rewrite.source);\n    let params = matcher(parsedAs.pathname);\n\n    if (rewrite.has && params) {\n      const hasParams = (0, _prepareDestination.matchHas)({\n        headers: {\n          host: document.location.hostname\n        },\n        cookies: Object.fromEntries(document.cookie.split('; ').map(item => {\n          const [key, ...value] = item.split('=');\n          return [key, value.join('=')];\n        }))\n      }, rewrite.has, parsedAs.query);\n\n      if (hasParams) {\n        Object.assign(params, hasParams);\n      } else {\n        params = false;\n      }\n    }\n\n    if (params) {\n      if (!rewrite.destination) {\n        // this is a proxied rewrite which isn't handled on the client\n        return true;\n      }\n\n      const destRes = (0, _prepareDestination.default)(rewrite.destination, params, query, true);\n      parsedAs = destRes.parsedDestination;\n      asPath = destRes.newUrl;\n      Object.assign(query, destRes.parsedDestination.query);\n      fsPathname = (0, _normalizeTrailingSlash.removePathTrailingSlash)((0, _normalizeLocalePath.normalizeLocalePath)((0, _router.delBasePath)(asPath), locales).pathname);\n\n      if (pages.includes(fsPathname)) {\n        // check if we now match a page as this means we are done\n        // resolving the rewrites\n        matchedPage = true;\n        resolvedHref = fsPathname;\n        return true;\n      } // check if we match a dynamic-route, if so we break the rewrites chain\n\n\n      resolvedHref = resolveHref(fsPathname);\n\n      if (resolvedHref !== asPath && pages.includes(resolvedHref)) {\n        matchedPage = true;\n        return true;\n      }\n    }\n  };\n\n  let finished = false;\n\n  for (let i = 0; i < rewrites.beforeFiles.length; i++) {\n    const rewrite = rewrites.beforeFiles[i];\n\n    if (handleRewrite(rewrite)) {\n      finished = true;\n      break;\n    }\n  }\n\n  if (!pages.includes(fsPathname)) {\n    if (!finished) {\n      for (let i = 0; i < rewrites.afterFiles.length; i++) {\n        const rewrite = rewrites.afterFiles[i];\n\n        if (handleRewrite(rewrite)) {\n          finished = true;\n          break;\n        }\n      }\n    } // check dynamic route before processing fallback rewrites\n\n\n    if (!finished) {\n      resolvedHref = resolveHref(fsPathname);\n      matchedPage = pages.includes(resolvedHref);\n      finished = matchedPage;\n    }\n\n    if (!finished) {\n      for (let i = 0; i < rewrites.fallback.length; i++) {\n        const rewrite = rewrites.fallback[i];\n\n        if (handleRewrite(rewrite)) {\n          finished = true;\n          break;\n        }\n      }\n    }\n  }\n\n  return {\n    asPath,\n    parsedAs,\n    matchedPage,\n    resolvedHref\n  };\n}","map":null,"metadata":{},"sourceType":"script"}